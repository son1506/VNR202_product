import React, { useEffect, useMemo, useState } from 'react';
import {
  MapContainer,
  TileLayer,
  Polyline,
  Polygon,
  Marker,
  Popup,
  LayerGroup,
} from 'react-leaflet';
import L from 'leaflet';
import { useSearchParams } from 'react-router-dom';
import { motion } from 'framer-motion';
import 'leaflet/dist/leaflet.css';

// Fix icon ƒë∆∞·ªùng d·∫´n khi build Vite
import markerIcon2x from 'leaflet/dist/images/marker-icon-2x.png';
import markerIcon from 'leaflet/dist/images/marker-icon.png';
import markerShadow from 'leaflet/dist/images/marker-shadow.png';

L.Icon.Default.mergeOptions({
  iconRetinaUrl: markerIcon2x,
  iconUrl: markerIcon,
  shadowUrl: markerShadow,
});

// Custom icons cho c√°c t√°c nh√¢n
const createCustomIcon = (color: string, symbol: string) => {
  return L.divIcon({
    html: `
      <div style="
        background-color: ${color}; 
        width: 30px; 
        height: 30px; 
        border-radius: 50%; 
        border: 2px solid white; 
        display: flex; 
        align-items: center; 
        justify-content: center; 
        font-size: 16px; 
        color: white; 
        font-weight: bold;
        box-shadow: 0 2px 10px rgba(0,0,0,0.3);
      ">
        ${symbol}
      </div>
    `,
    className: 'custom-div-icon',
    iconSize: [30, 30],
    iconAnchor: [15, 15],
  });
};

// KHU V·ª∞C C√ÅC QU·∫¶N ƒê·∫¢O C·ª¶A VI·ªÜT NAM
const HOANG_SA_AREA: [number, number][][] = [
  [
    [17.5, 111.0],  // Top-Left
    [17.5, 113.5],  // Top-Right
    [15.5, 113.5],  // Bottom-Right
    [15.5, 111.0],  // Bottom-Left
  ],
];

const TRUONG_SA_AREA: [number, number][][] = [
  [
    [12.5, 111.0], // Top-Left
    [12.5, 116.5], // Top-Right
    [6.0, 116.5],  // Bottom-Right
    [6.0, 111.0],  // Bottom-Left
  ],
];

// ===== T√ÇM V√ôNG (ƒë·∫∑t ng√¥i sao) =====
const HOANG_SA_CENTER: [number, number] = [16.5, 112.25];
const TRUONG_SA_CENTER: [number, number] = [9.25, 113.8];

// ===== ICON SAO V√ÄNG (SVG) =====
const STAR_ICON = L.divIcon({
  className: "vn-flag-star",
  html: `
    <svg width="36" height="36" viewBox="0 0 100 100" aria-label="Vietnam star">
      <polygon
        points="50,5 61,36 94,38 67,58 76,90 50,72 24,90 33,58 6,38 39,36"
        fill="#facc15"
      />
    </svg>
  `,
  iconSize: [36, 36],
  iconAnchor: [18, 18],
});

// ====== Types ======
type ActorKey = 'North' | 'South' | 'NLF' | 'US';
type EventPt = {
  id: string;
  title: string;
  year: number;
  summary: string;
  actors: ActorKey[];
  topic: 'politics' | 'military' | 'diplomacy' | 'legal';
  coords: [number, number];
  source?: string;
  importance: 'high' | 'medium' | 'low';
};

// ====== Data ======
const DMZ_LINE: [number, number][] = [
  [17.0, 105.7],
  [17.0, 108.6],
];

const DMZ_BAND: [number, number][][] = [
  [
    [17.15, 105.9],
    [16.85, 105.9],
    [16.85, 107.5],
    [17.15, 107.5],
  ],
];

// C√°c to·∫° ƒë·ªô ti·ªán d√πng
const COORDS = {
  HANOI: [21.0278, 105.8342] as [number, number],
  SAIGON: [10.7769, 106.7009] as [number, number],
  BEN_TRE: [10.1060, 106.3750] as [number, number],
  AP_BAC: [10.3581, 106.1200] as [number, number],
  TAY_NINH: [11.3591, 106.1417] as [number, number],
  TONKIN_GULF: [19.7, 106.8] as [number, number],
  GENEVA: [46.2044, 6.1432] as [number, number],
};

const EVENTS: EventPt[] = [
  {
    id: 'geneva-1954',
    title: 'Hi·ªáp ƒë·ªãnh Gen√®ve',
    year: 1954,
    summary: 'ƒê√¨nh ch·ªâ chi·∫øn s·ª±; gi·ªõi tuy·∫øn qu√¢n s·ª± t·∫°m th·ªùi; d·ª± ki·∫øn t·ªïng tuy·ªÉn c·ª≠ th·ªëng nh·∫•t.',
    actors: ['North', 'South'],
    topic: 'diplomacy',
    coords: COORDS.GENEVA,
    importance: 'high',
  },
  {
    id: 'phase-1954-58',
    title: 'T√°i thi·∫øt MB, c·ªßng c·ªë MN',
    year: 1958, // L·∫•y nƒÉm cu·ªëi c·ªßa giai ƒëo·∫°n
    summary: 'Mi·ªÅn B·∫Øc c·ªßng c·ªë h·∫≠u ph∆∞∆°ng; Mi·ªÅn Nam th·ª±c hi·ªán ch√≠nh s√°ch ‚Äút·ªë c·ªông di·ªát c·ªông‚Äù v√† ban h√†nh Lu·∫≠t 10-59 ƒë·ªÉ ƒë√†n √°p phong tr√†o.',
    actors: ['North', 'South'],
    topic: 'politics',
    coords: COORDS.SAIGON, // Trung t√¢m ch√≠nh quy·ªÅn VNCH
    importance: 'high',
  },
  {
    id: 'election-1955-56',
    title: 'B·∫ø t·∫Øc hi·ªáp th∆∞∆°ng ‚Äì t·ªïng tuy·ªÉn c·ª≠',
    year: 1956, // L·∫•y nƒÉm cu·ªëi c·ªßa giai ƒëo·∫°n
    summary: 'VNCH v√† M·ªπ t·ª´ ch·ªëi hi·ªáp th∆∞∆°ng t·ªïng tuy·ªÉn c·ª≠ (1956) ‚Üí ti·∫øn tr√¨nh th·ªëng nh·∫•t ƒë·∫•t n∆∞·ªõc b·ªã b·∫ø t·∫Øc.',
    actors: ['South', 'US'],
    topic: 'legal',
    coords: COORDS.SAIGON,
    importance: 'high',
  },

  // 1959 ‚Äì Ngh·ªã quy·∫øt 15 (H√† N·ªôi)
  {
    id: 'resolution-15-1959',
    title: 'Ngh·ªã quy·∫øt 15 (1959)',
    year: 1959,
    summary:
      'X√°c l·∫≠p hai nhi·ªám v·ª• chi·∫øn l∆∞·ª£c: CNXH ·ªü MB; CM d√¢n t·ªôc‚Äìd√¢n ch·ªß ·ªü MN; m·ªü ƒë∆∞·ªùng cho phong tr√†o ƒê·ªìng kh·ªüi.',
    actors: ['North'],
    topic: 'politics',
    coords: [21.0278, 105.8342], // H√† N·ªôi
    importance: 'high',
    source:
      'https://vi.wikipedia.org/wiki/Ngh%E1%BB%8B_quy%E1%BA%BFt_Trung_%C6%B0%C6%A1ng_15',
  },

  {
    id: 'shift-1959-60',
    title: 'Chuy·ªÉn pha ƒë·∫•u tranh ·ªü mi·ªÅn Nam',
    year: 1960, // L·∫•y nƒÉm ƒê·ªìng kh·ªüi lan r·ªông
    summary: 'Tri·ªÉn khai Ngh·ªã quy·∫øt 15 (1959) ‚Üí c∆° s·ªü cho ƒê·ªìng kh·ªüi lan r·ªông t·∫°i mi·ªÅn Nam, kh·ªüi ƒë·∫ßu t·ª´ B·∫øn Tre.',
    actors: ['North', 'NLF'],
    topic: 'politics',
    coords: COORDS.BEN_TRE, // N∆°i kh·ªüi ph√°t ƒê·ªìng kh·ªüi
    importance: 'high',
  },
  {
    id: 'nlf-1960-61',
    title: 'MTDTGPMN & Qu√¢n Gi·∫£i ph√≥ng',
    year: 1961, // L·∫•y nƒÉm h√¨nh th√†nh QGP
    summary: 'Th√°ng 12/1960 th√†nh l·∫≠p M·∫∑t tr·∫≠n; th√°ng 2/1961 h√¨nh th√†nh Qu√¢n Gi·∫£i ph√≥ng MN, th·ªëng nh·∫•t l·ª±c l∆∞·ª£ng v≈© trang.',
    actors: ['NLF'],
    topic: 'politics',
    coords: COORDS.TAY_NINH, // CƒÉn c·ª© ƒë·ªãa
    importance: 'high',
  },
  {
    id: 'specialwar-1961-64',
    title: '‚ÄúChi·∫øn tranh ƒë·∫∑c bi·ªát‚Äù',
    year: 1964, // L·∫•y nƒÉm cu·ªëi c·ªßa giai ƒëo·∫°n
    summary: 'M·ªπ v√† VNCH th·ª±c hi·ªán chi·∫øn l∆∞·ª£c "Chi·∫øn tranh ƒë·∫∑c bi·ªát", s·ª≠ d·ª•ng c·ªë v·∫•n, vi·ªán tr·ª£ v√† qu√¢n ƒë·ªôi VNCH, k·∫øt h·ª£p v·ªõi chi·∫øn thu·∫≠t ·∫•p chi·∫øn l∆∞·ª£c.',
    actors: ['US', 'South', 'NLF'],
    topic: 'military',
    coords: COORDS.SAIGON, // Trung t√¢m ƒë·∫ßu n√£o ch·ªâ huy
    importance: 'high',
  },
  {
    id: 'crisis-1963',
    title: 'Kh·ªßng ho·∫£ng 1963 & ƒë·∫£o ch√≠nh',
    year: 1963,
    summary: 'Bi·∫øn c·ªë Ph·∫≠t gi√°o leo thang th√†nh kh·ªßng ho·∫£ng ch√≠nh tr·ªã, d·∫´n ƒë·∫øn cu·ªôc ƒë·∫£o ch√≠nh l·∫≠t ƒë·ªï Ng√¥ ƒê√¨nh Di·ªám v√†o th√°ng 11/1963.',
    actors: ['South', 'US'],
    topic: 'politics',
    coords: COORDS.SAIGON,
    importance: 'high',
  },
  {
    id: 'tonkin-1964',
    title: 'S·ª± ki·ªán V·ªãnh B·∫Øc B·ªô',
    year: 1964,
    summary: 'Ngh·ªã quy·∫øt V·ªãnh B·∫Øc B·ªô ƒë∆∞·ª£c Qu·ªëc h·ªôi M·ªπ th√¥ng qua, m·ªü ƒë∆∞·ªùng cho vi·ªác can d·ª± qu√¢n s·ª± tr·ª±c ti·∫øp v√† s√¢u r·ªông h∆°n c·ªßa Hoa K·ª≥.',
    actors: ['US', 'North'],
    topic: 'diplomacy',
    coords: COORDS.TONKIN_GULF,
    importance: 'high',
  },
];


// ====== Helpers ======
const ACTOR_CONFIG: Record<ActorKey, { label: string; color: string; symbol: string }> = {
  North: { label: 'Mi·ªÅn B·∫Øc (VNDCCH)', color: '#ef4444', symbol: 'üü•' },
  South: { label: 'Mi·ªÅn Nam (VNCH)', color: '#3b82f6', symbol: 'üü¶' },
  NLF: { label: 'MTDTGP MN / QGP', color: '#10b981', symbol: '‚≠ê' },
  US: { label: 'Hoa K·ª≥', color: '#8b5cf6', symbol: 'üá∫üá∏' },
};

const TOPIC_CONFIG: Record<string, { color: string; label: string }> = {
  politics: { color: '#f59e0b', label: 'Ch√≠nh tr·ªã' },
  military: { color: '#dc2626', label: 'Qu√¢n s·ª±' },
  diplomacy: { color: '#059669', label: 'Ngo·∫°i giao' },
  legal: { color: '#7c3aed', label: 'Ph√°p l√Ω' },
};

function useQueryDefaults() {
  const [sp] = useSearchParams();
  const yearQ = Number(sp.get('year'));
  const actorsQ = sp.get('actors')?.split(',').filter(Boolean) as ActorKey[] | undefined;

  return {
    year: !isNaN(yearQ) ? Math.min(Math.max(yearQ, 1954), 1964) : 1964,
    actors: actorsQ?.length ? new Set(actorsQ) : new Set<ActorKey>(['North', 'South', 'NLF', 'US']),
  };
}

const MapPage: React.FC = () => {
  const defaults = useQueryDefaults();
  const [year, setYear] = useState<number>(defaults.year);
  const [showDMZ, setShowDMZ] = useState(true);
  const [actors, setActors] = useState<Set<ActorKey>>(defaults.actors);
  const [selectedTopic, setSelectedTopic] = useState<string>('all');
  const [showPanel, setShowPanel] = useState(true);

  const center: L.LatLngExpression = [15.5, 107.0];

  const filteredEvents = useMemo(() => {
    return EVENTS.filter((e) =>
      e.year <= year &&
      e.actors.some((a) => actors.has(a)) &&
      (selectedTopic === 'all' || e.topic === selectedTopic)
    );
  }, [year, actors, selectedTopic]);

  const toggleActor = (a: ActorKey) =>
    setActors((prev) => {
      const next = new Set(prev);
      if (next.has(a)) {
        next.delete(a);
      } else {
        next.add(a);
      }
      return next;
    });

  return (
    <div className="relative min-h-screen">
      {/* Toggle button for panel */}
      <button
        onClick={() => setShowPanel(!showPanel)}
        className="absolute z-[1001] top-4 right-4 p-3 rounded-full bg-white/20 backdrop-blur-xl border border-white/30 text-white hover:bg-white/30 transition-colors"
      >
        {showPanel ? '‚úï' : '‚ò∞'}
      </button>

      {/* Control Panel */}
      <motion.div
        initial={{ x: -400 }}
        animate={{ x: showPanel ? 0 : -380 }}
        className="absolute z-[1000] top-4 left-4 p-6 rounded-3xl border border-white/20 backdrop-blur-xl bg-gradient-to-br from-indigo-900/80 to-purple-900/80 text-white w-[400px] shadow-2xl"
      >
        <div className="flex items-center gap-3 mb-6">
          <div className="text-2xl">üó∫Ô∏è</div>
          <h2 className="text-xl font-bold">B·∫£n ƒë·ªì Vi·ªát Nam 1954-1964</h2>
        </div>

        {/* Year Slider */}
        <div className="mb-6">
          <div className="flex justify-between items-center mb-3">
            <span className="text-sm opacity-80">NƒÉm hi·ªÉn th·ªã ‚â§</span>
            <span className="font-bold text-xl text-yellow-300">{year}</span>
          </div>
          <input
            type="range"
            min={1954}
            max={1964}
            value={year}
            onChange={(e) => setYear(Number(e.target.value))}
            className="w-full h-2 bg-white/20 rounded-lg appearance-none cursor-pointer slider"
            style={{
              background: `linear-gradient(to right, #3b82f6 0%, #3b82f6 ${((year - 1954) / 10) * 100}%, rgba(255,255,255,0.2) ${((year - 1954) / 10) * 100}%, rgba(255,255,255,0.2) 100%)`
            }}
          />
          <div className="flex justify-between text-xs opacity-70 mt-1">
            <span>1954 (Gen√®ve)</span>
            <span>1964 (V·ªãnh B·∫Øc B·ªô)</span>
          </div>
        </div>

        {/* Layer Controls */}
        <div className="mb-6">
          <h3 className="text-sm font-semibold mb-3 text-cyan-300">üóÇÔ∏è L·ªõp hi·ªÉn th·ªã</h3>
          <div className="grid grid-cols-2 gap-3">
            <label className="flex items-center gap-2 cursor-pointer">
              <input
                type="checkbox"
                checked={showDMZ}
                onChange={() => setShowDMZ(v => !v)}
                className="w-4 h-4"
              />
              <span className="text-sm">üöß DMZ / Vƒ© tuy·∫øn 17¬∞</span>
            </label>
          </div>
        </div>

        {/* Actor Filter */}
        <div className="mb-6">
          <h3 className="text-sm font-semibold mb-3 text-yellow-300">üë• L·ªçc theo t√°c nh√¢n</h3>
          <div className="space-y-2">
            {(Object.keys(ACTOR_CONFIG) as ActorKey[]).map((a) => (
              <label key={a} className="flex items-center gap-3 cursor-pointer">
                <input
                  type="checkbox"
                  checked={actors.has(a)}
                  onChange={() => toggleActor(a)}
                  className="w-4 h-4"
                />
                <span className="text-xl">{ACTOR_CONFIG[a].symbol}</span>
                <span className="text-sm flex-1">{ACTOR_CONFIG[a].label}</span>
              </label>
            ))}
          </div>
        </div>

        {/* Topic Filter */}
        <div className="mb-6">
          <h3 className="text-sm font-semibold mb-3 text-pink-300">üè∑Ô∏è L·ªçc theo ch·ªß ƒë·ªÅ</h3>
          <select
            value={selectedTopic}
            onChange={(e) => setSelectedTopic(e.target.value)}
            className="w-full p-2 rounded-lg bg-white/20 border border-white/30 text-white text-sm"
          >
            <option value="all" className="text-black">T·∫•t c·∫£ ch·ªß ƒë·ªÅ</option>
            {Object.entries(TOPIC_CONFIG).map(([key, config]) => (
              <option key={key} value={key} className="text-black">
                {config.label}
              </option>
            ))}
          </select>
        </div>

        {/* Statistics */}
        <div className="bg-white/10 rounded-xl p-4">
          <h3 className="text-sm font-semibold mb-2 text-green-300">üìä Th·ªëng k√™</h3>
          <div className="text-xs space-y-1 opacity-90">
            <div>S·ª± ki·ªán hi·ªÉn th·ªã: <strong>{filteredEvents.length}</strong></div>
            <div>T·ªïng s·ª± ki·ªán: <strong>{EVENTS.length}</strong></div>
            <div>Giai ƒëo·∫°n: <strong>1954-{year}</strong></div>
          </div>
        </div>
      </motion.div>

      {/* Map Container */}
      <MapContainer
        center={center}
        zoom={6}
        minZoom={5}
        maxZoom={10}
        style={{ height: '100vh', width: '100%' }}
        className="z-0"
      >
        {/* Base Map */}
        <TileLayer
          url="https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png"
          attribution='&copy; <a href="https://www.openstreetmap.org/copyright">OSM</a>'
        />

        {/* DMZ Layer */}
        {showDMZ && (
          <LayerGroup>
            <Polyline
              positions={DMZ_LINE}
              pathOptions={{
                color: '#ef4444',
                weight: 4,
                dashArray: '10 5',
                opacity: 0.8
              }}
            />
            <Polygon
              positions={DMZ_BAND}
              pathOptions={{
                color: '#7c3aed',
                weight: 2,
                fillColor: '#7c3aed',
                fillOpacity: 0.15,
                dashArray: '5 5'
              }}
            />
          </LayerGroup>
        )}

        {/* L√£nh th·ªï Vi·ªát Nam */}
        <LayerGroup>
          {/* Qu·∫ßn ƒë·∫£o Ho√†ng Sa */}
          <Polygon
            positions={HOANG_SA_AREA}
            pathOptions={{
              color: '#dc2626',      // vi·ªÅn ƒë·ªè
              weight: 2,
              fillColor: '#dc2626',  // n·ªÅn ƒë·ªè
              fillOpacity: 0.35,
            }}
          >
            <Popup>
              <div>
                <h3 className="font-bold text-base">Qu·∫ßn ƒë·∫£o Ho√†ng Sa</h3>
                <p className="text-sm">L√† m·ªôt ph·∫ßn l√£nh th·ªï kh√¥ng th·ªÉ t√°ch r·ªùi c·ªßa Vi·ªát Nam.</p>
              </div>
            </Popup>
          </Polygon>
          <Marker position={HOANG_SA_CENTER} icon={STAR_ICON} />

          {/* Qu·∫ßn ƒë·∫£o Tr∆∞·ªùng Sa */}
          <Polygon
            positions={TRUONG_SA_AREA}
            pathOptions={{
              color: '#dc2626',
              weight: 2,
              fillColor: '#dc2626',
              fillOpacity: 0.35,
            }}
          >
            <Popup>
              <div>
                <h3 className="font-bold text-base">Qu·∫ßn ƒë·∫£o Tr∆∞·ªùng Sa</h3>
                <p className="text-sm">L√† m·ªôt ph·∫ßn l√£nh th·ªï kh√¥ng th·ªÉ t√°ch r·ªùi c·ªßa Vi·ªát Nam.</p>
              </div>
            </Popup>
          </Polygon>
          <Marker position={TRUONG_SA_CENTER} icon={STAR_ICON} />
        </LayerGroup>

        {/* Events as Custom Markers */}
        {filteredEvents.map((event) => {
          const primaryActor = event.actors[0];
          const config = ACTOR_CONFIG[primaryActor];

          return (
            <Marker
              key={event.id}
              position={event.coords}
              icon={createCustomIcon(config.color, config.symbol)}
            >
              <Popup className="custom-popup">
                <div className="space-y-3 min-w-[280px]">
                  <div className="border-b border-gray-200 pb-2">
                    <h3 className="font-bold text-lg text-gray-800">{event.title}</h3>
                    <div className="flex items-center gap-4 text-sm text-gray-600 mt-1">
                      <span>üìÖ {event.year}</span>
                      <span
                        className="px-2 py-1 rounded-full text-white text-xs"
                        style={{ backgroundColor: TOPIC_CONFIG[event.topic].color }}
                      >
                        {TOPIC_CONFIG[event.topic].label}
                      </span>
                    </div>
                  </div>

                  <p className="text-sm text-gray-700 leading-relaxed">
                    {event.summary}
                  </p>

                  <div>
                    <div className="text-xs text-gray-600 mb-1">T√°c nh√¢n li√™n quan:</div>
                    <div className="flex gap-2 flex-wrap">
                      {event.actors.map(actor => (
                        <span
                          key={actor}
                          className="text-xs px-2 py-1 rounded-full text-white"
                          style={{ backgroundColor: ACTOR_CONFIG[actor].color }}
                        >
                          {ACTOR_CONFIG[actor].symbol} {ACTOR_CONFIG[actor].label}
                        </span>
                      ))}
                    </div>
                  </div>

                  {event.source && (
                    <a
                      href={event.source}
                      target="_blank"
                      rel="noreferrer"
                      className="inline-block text-xs text-blue-600 hover:text-blue-800 underline"
                    >
                      üìñ Xem ngu·ªìn tham kh·∫£o
                    </a>
                  )}
                </div>
              </Popup>
            </Marker>
          );
        })}
      </MapContainer>

      <style>{`
        .custom-popup .leaflet-popup-content-wrapper {
          border-radius: 12px;
          box-shadow: 0 10px 25px rgba(0,0,0,0.2);
        }
        .slider::-webkit-slider-thumb {
          appearance: none;
          height: 20px;
          width: 20px;
          background: #fbbf24;
          border-radius: 50%;
          cursor: pointer;
        }
      `}</style>
    </div>
  );
};

export default MapPage;